package com.meirenmeitu.ui.mvp.base

import android.content.Context
import android.os.Bundle
import android.support.v4.app.Fragment
import android.support.v4.app.FragmentActivity
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import com.meirenmeitu.library.rxbind.RxView
import com.meirenmeitu.ui.R
import com.meirenmeitu.ui.state.OnRetryListener
import com.meirenmeitu.ui.state.StatusManager
import io.reactivex.disposables.CompositeDisposable


/** Android 解决 Fragment 懒加载并嵌套使用时子 Fragment 的 View 不填充 -->
 * https://blog.csdn.net/liuwan1992/article/details/79095891
 *
 * Fragment嵌套懒加载  --> https://www.jb51.net/article/138764.htm
 * Desc: Fragment,带懒加载功能
 * Author: Jooyer
 * Date: 2018-07-30
 * Time: 11:16
 */
abstract class BaseFragment<T : IBasePresenter> : Fragment(), BaseView, RxView.Action1<View>, OnRetryListener {
    val mCompositeDisposable = CompositeDisposable()
    lateinit var mPresenter: T

    lateinit var mActivity: FragmentActivity

    /**
     * 是否复用视图
     */
    private var isReuseView = false

    /**
     * 根布局
     */
    private var mRoot: View? = null
    /**
     * 持久化保存数据
     */
    private var mStateSave: Bundle? = null
    /**
     * 请求网络异常等界面管理
     */
    var mStatusManager: StatusManager? = null
    /**
     * 默认动画持续时间
     */
    @Deprecated("遗弃")
    private var mAnimationDuration = 2000

    /**
     * 首次可见
     */
    private var mIsFirstVisible = true

    /**
     * View 初始化
     */
    private var isViewCreated = false

    /**
     *  当前状态
     */
    private var currentVisibleState = false

    override fun onAttach(context: Context) {
        super.onAttach(context)
        if (context is FragmentActivity) {
            mActivity = context
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        mPresenter = createPresenter()
        lifecycle.addObserver(mPresenter)
    }

    /**
     * setUserVisibleHint 函数第一次调用肯定给的是false，第二次才是true
     */
    override fun setUserVisibleHint(isVisibleToUser: Boolean) {
        super.setUserVisibleHint(isVisibleToUser)

        // 对于默认 tab 和 间隔 checked tab 需要等到 isViewCreated = true 后才可以通过此通知用户可见
        // 这种情况下第一次可见不是在这里通知 因为 isViewCreated = false 成立,等从别的界面回到这里后会使用 onFragmentResume 通知可见
        // 对于非默认 tab mIsFirstVisible = true 会一直保持到选择则这个 tab 的时候，因为在 onActivityCreated 会返回 false
        if (isViewCreated) {
            if (isVisibleToUser && !currentVisibleState) {
                println("setUserVisibleHint===========可见")
                dispatchUserVisibleHint(true)
            } else if (!isVisibleToUser && currentVisibleState) {
                println("setUserVisibleHint===========不可见")
                dispatchUserVisibleHint(false)
            }
        }
    }


    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {
        return initStatusManager(inflater, container, savedInstanceState)
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        if (null == mRoot) {
            mRoot = view
        }
        super.onViewCreated(view, savedInstanceState)
        setLogic()
        bindEvent()
    }

    override fun onActivityCreated(savedInstanceState: Bundle?) {
        super.onActivityCreated(savedInstanceState)
        restoreStateFromArguments()
        isViewCreated = true
        // !isHidden() 默认为 true 在调用 hide show 的时候可以使用
        if (null != savedInstanceState) {
            // 可以做一些初始化工作
            val ft = fragmentManager!!.beginTransaction()
            if (null != ft) {
                if (isHidden) {
                    ft.hide(this)
                } else {
                    ft.show(this)
                }
                ft.commit()
            }
        }
        if (!isHidden && userVisibleHint) {
            dispatchUserVisibleHint(true);
        }

    }

    override fun onHiddenChanged(hidden: Boolean) {
        super.onHiddenChanged(hidden)
        println("setUserVisibleHint===========hidden: $hidden")
        if (hidden) {
            dispatchUserVisibleHint(false)
        } else {
            dispatchUserVisibleHint(true)
        }
    }

    override fun onResume() {
        super.onResume()
        if (!mIsFirstVisible) {
            if (!isHidden && !currentVisibleState && userVisibleHint) {
                println("onResume===========")
                dispatchUserVisibleHint(true)
            }
        }
    }

    override fun onPause() {
        super.onPause()
        // 当前 Fragment 包含子 Fragment 的时候 dispatchUserVisibleHint 内部本身就会通知子 Fragment 不可见
        // 子 fragment 走到这里的时候自身又会调用一遍 ？
        if (currentVisibleState && userVisibleHint) {
            dispatchUserVisibleHint(false)
        }
    }

    /**
     * 统一处理 显示隐藏
     *
     * @param visible
     */
    private fun dispatchUserVisibleHint(visible: Boolean) {
        //当前 Fragment 是 child 时候 作为缓存 Fragment 的子 fragment getUserVisibleHint = true
        //但当父 fragment 不可见所以 currentVisibleState = false 直接 return 掉
        // 这里限制则可以限制多层嵌套的时候子 Fragment 的分发
        if (visible && isParentInvisible()) return

        //此处是对子 Fragment 不可见的限制，因为 子 Fragment 先于父 Fragment回调本方法 currentVisibleState 置位 false
        // 当父 dispatchChildVisibleState 的时候第二次回调本方法 visible = false 所以此处 visible 将直接返回
        if (currentVisibleState == visible) {
            return
        }

        currentVisibleState = visible

        if (visible) {
            if (mIsFirstVisible) {
                mIsFirstVisible = false
                onUserVisible(true)
            }
            onUserVisible(false)
            dispatchChildVisibleState(true)
        } else {
            dispatchChildVisibleState(false)
            onUserInvisible()
        }
    }


    /**
     * 用于分发可见时间的时候父获取 fragment 是否隐藏
     *
     * @return true fragment 不可见， false 父 fragment 可见
     */
    private fun isParentInvisible(): Boolean {
        val fragment = parentFragment as BaseFragment<*>?
        return fragment != null && !fragment.isSupportVisible()

    }

    private fun isSupportVisible(): Boolean {
        return currentVisibleState
    }

    /**
     * 当前 Fragment 是 child 时候 作为缓存 Fragment 的子 fragment 的唯一或者嵌套 VP 的第一 fragment 时 getUserVisibleHint = true
     * 但是由于父 Fragment 还进入可见状态所以自身也是不可见的， 这个方法可以存在是因为庆幸的是 父 fragment 的生命周期回调总是先于子 Fragment
     * 所以在父 fragment 设置完成当前不可见状态后，需要通知子 Fragment 我不可见，你也不可见，
     *
     *
     * 因为 dispatchUserVisibleHint 中判断了 isParentInvisible 所以当 子 fragment 走到了 onActivityCreated 的时候直接 return 掉了
     *
     *
     * 当真正的外部 Fragment 可见的时候，走 setVisibleHint (VP 中)或者 onActivityCreated (hide show) 的时候
     * 从对应的生命周期入口调用 dispatchChildVisibleState 通知子 Fragment 可见状态
     *
     * @param visible
     */
    private fun dispatchChildVisibleState(visible: Boolean) {
        val childFragmentManager = childFragmentManager
        val fragments = childFragmentManager.fragments
        if (!fragments.isEmpty()) {
            for (child in fragments) {
                if (child is BaseFragment<*> && !child.isHidden() && child.getUserVisibleHint()) {
                    child.dispatchUserVisibleHint(visible)
                }
            }
        }
    }

    /**
     * 设置是否使用 View 的复用
     * View 的复用是指: 在 ViewPager 销毁和<重>建 Fragment 时会不断调用
     * onCreateView() -> onDestroyView() 之间的生命函数,这样可能会出现重复
     * 创建 View 的情况,导致界面上显示多个相同的 Fragment ,
     * View 的复用其实就是保存第一次创建的 View,后面在调用 onCreateView()
     * 时直接返回第一次创建的 View
    </重> */
    fun setReuseView(reuseView: Boolean) {
        isReuseView = reuseView
    }

    /**
     * 动画进入时
     *
     * @param duration --> 动画持续时间
     */
    @Deprecated("遗弃")
    private fun fadeInView(view: View, duration: Int) {
        view.alpha = 0f
        view.visibility = View.VISIBLE
        view.animate()
                .alpha(1f)
                .setDuration(duration.toLong())
                .setListener(null)
    }

    /**
     * 动画退出时
     *
     * @param duration --> 动画持续时间
     */
    @Deprecated("遗弃")
    private fun fadeOutView(view: View, duration: Int) {
        view.alpha = 1f
        view.visibility = View.VISIBLE
        view.animate()
                .alpha(0f)
                .setDuration(duration.toLong())
                .withEndAction { view.visibility = View.GONE }
    }

    @Deprecated("遗弃")
    fun setAnimationDuration(animationDuration: Int) {
        mAnimationDuration = animationDuration
    }

    /**
     * 对用户可见的时候调用
     */
    open fun onUserVisible(isFirst: Boolean) {

    }

    /**
     * 用户不可见的时候调用
     */
    open fun onUserInvisible() {

    }

    /**
     *   获取 Presenter 对象
     */
    abstract fun createPresenter(): T

    abstract fun getLayoutId(): Int

    // 在 Kotlin 中这个方法就没有必要重写了
    fun initializedViews(savedInstanceState: Bundle?, contentView: View) {

    }

    /**
     * 实现过程
     */
    abstract fun setLogic()

    /**
     * 绑定监听
     */
    abstract fun bindEvent()

    // 保存临时数据
    private fun saveState(): Bundle {
        val bundle = Bundle()
        onSaveState(bundle)
        return bundle
    }

    // 重写保存数据
    fun onSaveState(bundle: Bundle) {

    }

    // 重写取出数据
    fun onRestoreState(stateSave: Bundle?) {

    }


    // 保存 Bundle
    private fun saveStateToArguments() {
        if (null != view)
            mStateSave = saveState()
        val b = arguments
        if (null != mStateSave && null != b) {
            b.putBundle("SavedLocalVar", mStateSave)
        }
    }

    // 恢复 Bundle
    private fun restoreStateFromArguments(): Boolean {
        val b = arguments
        if (null != b) {
            mStateSave = b.getBundle("SavedLocalVar")
            onRestoreState(mStateSave)
            return null != mStateSave
        }
        return false
    }

    /**
     * 此函数开始数据加载的操作，且仅调用一次
     * 主要是加载动画,初始化展示数据的布局
     */
    private fun initStatusManager(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {
        if (0 != getLayoutId()) {
            val contentView = inflater.inflate(getLayoutId(), container, false)
            initializedViews(savedInstanceState, contentView)
            return if (useStatusManager()) {
                initialized(contentView)
            } else {
                contentView.visibility = View.VISIBLE
                contentView
            }

        }
        throw IllegalStateException("getLayoutId() 必须调用,且返回正常的布局ID")
    }

    private fun initialized(contentView: View): View {
        mStatusManager = StatusManager.newBuilder(contentView.context)
                .contentView(contentView)
                .loadingView(R.layout.widget_loading_page)
                .emptyDataView(R.layout.widget_empty_page)
                .netWorkErrorView(R.layout.widget_nonetwork_page)
                .errorView(R.layout.widget_error_page)
                .retryViewId(R.id.tv_retry_status)
                .onRetryListener(this)
                .build()
        mStatusManager?.showLoading()
        return mStatusManager?.getRootLayout()!!
    }


    // 此方法有时可能不会回调,在 onDestroyView() 中再调用一次
    override fun onSaveInstanceState(outState: Bundle) {
        super.onSaveInstanceState(outState)
        saveStateToArguments()
    }

    override fun onDestroyView() {
        super.onDestroyView()
        isViewCreated = false
        mIsFirstVisible = true
        saveStateToArguments()
        RxView.disposeBindClick()
        mCompositeDisposable.dispose()
    }

    /**
     *  是否使用视图布局管理器
     */
    open fun useStatusManager(): Boolean {
        return false
    }


    override fun onClick(view: View) {

    }

    /**
     * 点击视图中重试按钮
     */
    override fun onRetry() {

    }

    /**
     *  展示数据
     */
    override fun showData(data: Any?) {

    }

    /**
     * 错误提示
     */
    override fun showError(e: Any?) {

    }


}
